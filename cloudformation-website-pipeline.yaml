AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for CloudWatch Logs, DynamoDB, EC2, Load Balancer, Auto Scaling , and Real-Time Analytics.

Resources:
 #S3 bucket creation 
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    
# Dynamo db 
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyTable
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-05edb7c94b324f73c 
        InstanceType: t3.micro          
        SecurityGroupIds:
          - sg-002f5a2e1c10ce54a        
        KeyName: bidding               
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "Hello, World!" > /tmp/hello.txt

  # Auto Scaling Group
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - subnet-092d0d335b3d7ad0a  
        - subnet-03c1c466698b3a209  
      TargetGroupARNs:
        - !Ref MyTargetGroup

   # Load Balancer
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - subnet-092d0d335b3d7ad0a  
        - subnet-03c1c466698b3a209 
      SecurityGroups:
        - sg-002f5a2e1c10ce54a     
      Scheme: internet-facing       
      Type: application            

  # Target Group
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0b92707bcabd82204
      HealthCheckPath: /          
      HealthCheckPort: 80           
      HealthCheckProtocol: HTTP     
      
  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /the_app/logs
      RetentionInDays: 30

  # Kinesis Data Stream for Real-Time Analytics
  MyKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: MyKinesisStream
      ShardCount: 1  # Adjust based on your data volume

  # Lambda Function for Real-Time Data Processing
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              for record in event['Records']:
                  payload = json.loads(record['kinesis']['data'])
                  print("Processed record:", payload)
      Runtime: python3.9
      Timeout: 10

    # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KinesisAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: !GetAtt MyKinesisStream.Arn
        - PolicyName: CloudWatchLogsAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
         

 # Kinesis Event Source Mapping for Lambda
  MyKinesisEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MyKinesisStream.Arn
      FunctionName: !GetAtt MyLambdaFunction.Arn
      StartingPosition: LATEST
      
Outputs:
#cloudwatchlog output
  CloudWatchLogGroup:
    Description: "CloudWatch Log Group Name"
    Value: !Ref CloudWatchLogGroup
#dynamodb output
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref DynamoDBTable
    
#Load Balancer Output
  LoadBalancerDNS:
    Description: "Load Balancer DNS Name"
    Value: !GetAtt MyLoadBalancer.DNSName
#Auto Scaling Output
  AutoScalingGroupName:
    Description: "Auto Scaling Group Name"
    Value: !Ref MyAutoScalingGroup
#Kinesis Streame output
 KinesisStreamName:
    Description: "Kinesis Data Stream Name"
    Value: !Ref MyKinesisStream


